{"ast":null,"code":"var _jsxFileName = \"/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Notification from './components/Notification';\nimport Togglable from './components/Togglable';\nimport AddData from './components/AddData';\nimport ViewData from './components/ViewData';\nimport dataService from './services/data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [farms, setFarms] = useState([]);\n  const [message, setMessage] = useState('');\n  const [messageColor, setMessageColor] = useState('');\n  useEffect(() => {\n    dataService.getFarms().then(farms => {\n      setFarms(farms);\n    });\n  }, []);\n\n  const fetchData = () => {\n    console.log('fetching data...');\n\n    try {\n      dataService.fetchData().then(response => {\n        console.log(response);\n        setMessage('Data fetched');\n        setMessageColor('green');\n        setTimeout(() => {\n          setMessage('');\n        }, 4000);\n      });\n    } catch (exception) {\n      console.log('failed fetching data');\n      setMessage(`Fetching data failed ${exception}`);\n      setMessageColor('red');\n      setTimeout(() => {\n        setMessage('');\n      }, 4000);\n    }\n  };\n\n  const resetDatabase = () => {\n    if (window.confirm('Are you sure you want to reset the database? The database will be emptied.')) {\n      console.log('resetting database...');\n\n      try {\n        dataService.resetMeasurements().then(response => {\n          console.log(response);\n          setMessage('Database empty');\n          setMessageColor('green');\n          setTimeout(() => {\n            setMessage('');\n          }, 4000);\n        });\n      } catch (error) {\n        console.log('failed fetching data');\n        setMessage(`Fetching data failed ${error}`);\n        setMessageColor('red');\n        setTimeout(() => {\n          setMessage('');\n        }, 4000);\n      } //setData([])\n\n    }\n  };\n\n  const createMeasurement = async measurement => {\n    console.log(measurement);\n\n    try {\n      const response = await dataService.postMeasurement(measurement);\n      console.log(response.data);\n      const newData = { ...response.data,\n        farm: {\n          id: response.data.farm,\n          name: measurement.farm\n        }\n      };\n      console.log(newData); //const allData = data.concat(newData)\n      //const sortedData = allData.sort((a, b) => new Date(a.date) - new Date(b.date))\n      //setData(sortedData)\n\n      setMessage('New data added');\n      setMessageColor('green');\n      setTimeout(() => {\n        setMessage('');\n      }, 4000);\n    } catch (exception) {\n      console.log('failed adding measurement');\n      setMessage(`Adding data failed ${exception}`);\n      setMessageColor('red');\n      setTimeout(() => {\n        setMessage('');\n      }, 4000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      fetchData: fetchData,\n      resetDatabase: resetDatabase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: message,\n      messageColor: messageColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Togglable, {\n      openButtonLabel: \"Add data\",\n      openButtonId: \"addData-button\",\n      closeButtonLabel: \"Hide form\",\n      closeButtonId: \"hideForm-button\",\n      children: /*#__PURE__*/_jsxDEV(AddData, {\n        farms: farms,\n        createMeasurement: createMeasurement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Togglable, {\n      openButtonLabel: \"View data\",\n      openButtonId: \"viewData-button\",\n      closeButtonLabel: \"Hide data\",\n      closeButtonId: \"hideData-button\",\n      children: /*#__PURE__*/_jsxDEV(ViewData, {\n        farms: farms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"HmHKJQVi0q8EW1H4vmwu/OpAAz4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/App.js"],"names":["React","useState","useEffect","Header","Notification","Togglable","AddData","ViewData","dataService","App","farms","setFarms","message","setMessage","messageColor","setMessageColor","getFarms","then","fetchData","console","log","response","setTimeout","exception","resetDatabase","window","confirm","resetMeasurements","error","createMeasurement","measurement","postMeasurement","data","newData","farm","id","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport Header from './components/Header'\nimport Notification from './components/Notification'\nimport Togglable from './components/Togglable'\nimport AddData from './components/AddData'\nimport ViewData from './components/ViewData'\n\nimport dataService from './services/data'\n\nconst App = () => {\n\n  const [ farms, setFarms ] = useState([])\n  const [ message, setMessage ] = useState('')\n  const [ messageColor, setMessageColor ] = useState('')\n\n  useEffect(() => {\n    dataService.getFarms().then(farms => {\n      setFarms(farms)\n    })\n  }, [])\n\n  const fetchData = () => {\n    console.log('fetching data...')\n    try {\n      dataService.fetchData().then(response => {\n        console.log(response)\n        setMessage('Data fetched')\n        setMessageColor('green')\n        setTimeout(() => {\n          setMessage('')\n        }, 4000)\n      })\n    } catch (exception) {\n      console.log('failed fetching data')\n      setMessage(`Fetching data failed ${exception}`)\n      setMessageColor('red')\n      setTimeout(() => {\n        setMessage('')\n      }, 4000)\n    }\n  }\n\n  const resetDatabase = () => {\n    if (window.confirm('Are you sure you want to reset the database? The database will be emptied.')) {\n      console.log('resetting database...')\n      try {\n        dataService.resetMeasurements().then(response => {\n          console.log(response)\n          setMessage('Database empty')\n          setMessageColor('green')\n          setTimeout(() => {\n            setMessage('')\n          }, 4000)\n        })\n      } catch (error) {\n        console.log('failed fetching data')\n        setMessage(`Fetching data failed ${error}`)\n        setMessageColor('red')\n        setTimeout(() => {\n          setMessage('')\n        }, 4000)\n      }\n      //setData([])\n    }\n  }\n\n  const createMeasurement = async (measurement) => {\n    console.log(measurement)\n    try {\n      const response = await dataService.postMeasurement(measurement)\n      console.log(response.data)\n      const newData = {\n        ...response.data,\n        farm: { id: response.data.farm, name: measurement.farm }\n      }\n      console.log(newData)\n      //const allData = data.concat(newData)\n      //const sortedData = allData.sort((a, b) => new Date(a.date) - new Date(b.date))\n      //setData(sortedData)\n      setMessage('New data added')\n      setMessageColor('green')\n      setTimeout(() => {\n        setMessage('')\n      }, 4000)\n    } catch (exception) {\n      console.log('failed adding measurement')\n      setMessage(`Adding data failed ${exception}`)\n      setMessageColor('red')\n      setTimeout(() => {\n        setMessage('')\n      }, 4000)\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <Header fetchData={fetchData} resetDatabase={resetDatabase}/>\n      <Notification message={message} messageColor={messageColor}/>\n      <Togglable\n        openButtonLabel='Add data'\n        openButtonId='addData-button'\n        closeButtonLabel='Hide form'\n        closeButtonId='hideForm-button'>\n        <AddData farms={farms} createMeasurement={createMeasurement}/>\n      </Togglable>\n      <br />\n      <Togglable\n        openButtonLabel='View data'\n        openButtonId='viewData-button'\n        closeButtonLabel='Hide data'\n        closeButtonId='hideData-button'>\n        <ViewData farms={farms} />\n      </Togglable>\n      <br />\n    </div>\n\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}