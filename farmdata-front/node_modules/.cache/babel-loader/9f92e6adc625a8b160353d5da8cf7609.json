{"ast":null,"code":"var _jsxFileName = \"/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/components/ViewData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DataTable from './DataTable';\nimport DataChart from './DataChart';\nimport dataService from '../services/data';\nimport { Form, Button } from 'react-bootstrap';\nimport dateFnsFormat from 'date-fns/format';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewData = _ref => {\n  _s();\n\n  let {\n    farms\n  } = _ref;\n  const [farmFilter, setFarmFilter] = useState('');\n  const [monthFilter, setMonthFilter] = useState('');\n  const [typeFilter, setTypeFilter] = useState('');\n  const [unit, setUnit] = useState('');\n  const [data, setData] = useState([]);\n  const [max, setMax] = useState([]);\n  const [min, setMin] = useState([]);\n  const [average, setAverage] = useState([]);\n  const [showTableNotChart, setShowTableNotChart] = useState(true);\n\n  const handleFarmFilter = event => {\n    setFarmFilter(event.target.value);\n  };\n\n  const handleTypeFilter = event => {\n    setTypeFilter(event.target.value);\n  };\n\n  const handleMonthFilter = event => {\n    setMonthFilter(event.target.value);\n  };\n\n  const handleTableToChart = () => {\n    setShowTableNotChart(!showTableNotChart);\n  };\n\n  const filterAndShowData = async event => {\n    event.preventDefault();\n    const month = Number(monthFilter.substring(5, 7)) - 1;\n    console.log(month);\n    const year = monthFilter.substring(0, 4);\n    console.log(year);\n    const response = await dataService.getMonthlyFarmData(farmFilter, typeFilter, year, month);\n    const sortedData = await response.sort((a, b) => new Date(a.date) - new Date(b.date));\n    setData(sortedData);\n    const min = await dataService.getMonthlyFarmMin(farmFilter, typeFilter, year, month);\n    console.log(min);\n    setMin(min);\n    const max = await dataService.getMonthlyFarmMax(farmFilter, typeFilter, year, month);\n    console.log(max);\n    setMax(max);\n    const average = await dataService.getMonthlyFarmAverage(farmFilter, typeFilter, year, month);\n    console.log(average);\n    setAverage(average.toFixed(1));\n\n    if (typeFilter === 'pH') {\n      setUnit('pH');\n    } else if (typeFilter === 'rainFall') {\n      setUnit('mm');\n    } else if (typeFilter === 'temperature') {\n      setUnit('\\u00B0' + 'C');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      id: \"filterDataForm\",\n      onSubmit: filterAndShowData,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Set Farm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          id: \"selectFarmToFilter\",\n          value: farmFilter,\n          onChange: handleFarmFilter,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), farms.map(farm => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: farm.id,\n            children: farm.name\n          }, farm.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Set type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          id: \"selectTypeToFilter\",\n          value: typeFilter,\n          onChange: handleTypeFilter,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pH\",\n            children: \"pH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rainFall\",\n            children: \"Rainfall\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"temperature\",\n            children: \"Temperature\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Set month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          id: \"selectMonthToFilter\",\n          value: monthFilter,\n          type: \"month\",\n          onChange: handleMonthFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"filter-button\",\n        variant: \"outline-primary\",\n        type: \"submit\",\n        children: \"Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [data.length > 0 ? data[0].farm.name : '', \", \", data.length > 0 ? dateFnsFormat(new Date(data[0].date), 'MMMM yyyy') : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Minimum value: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), min.length > 0 ? min[0].value.toFixed(1) : '', \" \", unit, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Maximum value: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), max.length > 0 ? max[0].value.toFixed(1) : '', \" \", unit, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Average: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), average, \" \", unit, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      id: \"tableOrChart-button\",\n      variant: \"outline-primary\",\n      onClick: handleTableToChart,\n      children: showTableNotChart ? 'Show data in chart' : 'Show data in table'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), showTableNotChart ? /*#__PURE__*/_jsxDEV(DataTable, {\n      id: \"table\",\n      filteredData: data,\n      unit: unit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(DataChart, {\n      filteredData: data,\n      unit: unit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewData, \"0qIJvgSR8F8URTBZVaav/EC1k2s=\");\n\n_c = ViewData;\nexport default ViewData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewData\");","map":{"version":3,"sources":["/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/components/ViewData.js"],"names":["React","useState","DataTable","DataChart","dataService","Form","Button","dateFnsFormat","ViewData","farms","farmFilter","setFarmFilter","monthFilter","setMonthFilter","typeFilter","setTypeFilter","unit","setUnit","data","setData","max","setMax","min","setMin","average","setAverage","showTableNotChart","setShowTableNotChart","handleFarmFilter","event","target","value","handleTypeFilter","handleMonthFilter","handleTableToChart","filterAndShowData","preventDefault","month","Number","substring","console","log","year","response","getMonthlyFarmData","sortedData","sort","a","b","Date","date","getMonthlyFarmMin","getMonthlyFarmMax","getMonthlyFarmAverage","toFixed","map","farm","id","name","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport DataTable from './DataTable'\nimport DataChart from './DataChart'\n\nimport dataService from '../services/data'\n\nimport { Form, Button } from 'react-bootstrap'\n\nimport dateFnsFormat from 'date-fns/format'\n\nconst ViewData = ({ farms }) => {\n\n  const [ farmFilter, setFarmFilter ] = useState('')\n  const [ monthFilter, setMonthFilter ] = useState('')\n  const [ typeFilter, setTypeFilter ] = useState('')\n  const [ unit, setUnit ] = useState('')\n  const [ data, setData ] = useState([])\n  const [ max, setMax ] = useState([])\n  const [ min, setMin ] = useState([])\n  const [ average, setAverage ] = useState([])\n  const [ showTableNotChart, setShowTableNotChart ] = useState(true)\n\n  const handleFarmFilter = (event) => {\n    setFarmFilter(event.target.value)\n  }\n\n  const handleTypeFilter = (event) => {\n    setTypeFilter(event.target.value)\n  }\n\n  const handleMonthFilter = (event) => {\n    setMonthFilter(event.target.value)\n  }\n\n  const handleTableToChart = () => {\n    setShowTableNotChart(!showTableNotChart)\n  }\n\n  const filterAndShowData = async (event) => {\n    event.preventDefault()\n\n    const month = Number(monthFilter.substring(5,7))-1\n    console.log(month)\n    const year = monthFilter.substring(0,4)\n    console.log(year)\n\n    const response = await dataService.getMonthlyFarmData(farmFilter, typeFilter, year, month)\n    const sortedData = await response.sort((a, b) => new Date(a.date) - new Date(b.date))\n    setData(sortedData)\n\n    const min = await dataService.getMonthlyFarmMin(farmFilter, typeFilter, year, month)\n    console.log(min)\n    setMin(min)\n    const max = await dataService.getMonthlyFarmMax(farmFilter, typeFilter, year, month)\n    console.log(max)\n    setMax(max)\n    const average = await dataService.getMonthlyFarmAverage(farmFilter, typeFilter, year, month)\n    console.log(average)\n    setAverage(average.toFixed(1))\n\n    if (typeFilter === 'pH') {\n      setUnit('pH')\n    } else if (typeFilter === 'rainFall') {\n      setUnit('mm')\n    } else if (typeFilter === 'temperature') {\n      setUnit('\\u00B0'+'C')\n    }\n  }\n\n  return (\n    <div>\n      <br />\n      <Form id='filterDataForm' onSubmit={filterAndShowData}>\n\n        <Form.Group>\n          <Form.Label>Set Farm</Form.Label>\n          <Form.Select id='selectFarmToFilter' value={farmFilter} onChange={handleFarmFilter}>\n            <option disabled/>\n            {farms.map(farm =>\n              <option key={farm.name} value={farm.id}>{farm.name}</option>\n            )}\n          </Form.Select>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Set type</Form.Label>\n          <Form.Select id='selectTypeToFilter' value={typeFilter} onChange={handleTypeFilter}>\n            <option disabled/>\n            <option value=\"pH\">pH</option>\n            <option value=\"rainFall\">Rainfall</option>\n            <option value=\"temperature\">Temperature</option>\n          </Form.Select>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Set month</Form.Label>\n          <Form.Control id='selectMonthToFilter' value={monthFilter} type='month' onChange={handleMonthFilter}></Form.Control>\n        </Form.Group>\n\n        <br />\n        <Button id='filter-button' variant='outline-primary' type='submit' >Filter</Button>\n\n      </Form>\n\n      <br />\n      <h4>{data.length > 0 ? data[0].farm.name : ''}, {data.length > 0 ? dateFnsFormat(new Date(data[0].date), 'MMMM yyyy') : ''}</h4>\n      <b>Minimum value: </b>{min.length > 0 ? min[0].value.toFixed(1) : ''} {unit}\n      <br />\n      <b>Maximum value: </b>{max.length > 0 ? max[0].value.toFixed(1) : ''} {unit}\n      <br />\n      <b>Average: </b>{average} {unit}\n      <br />\n      <Button\n        id='tableOrChart-button'\n        variant='outline-primary'\n        onClick={handleTableToChart}\n      >\n        {showTableNotChart ? 'Show data in chart' : 'Show data in table'}\n      </Button>\n      {showTableNotChart\n        ? <DataTable id='table' filteredData={data} unit={unit}/>\n        : <DataChart filteredData={data} unit={unit}/>\n      }\n    </div>\n  )\n\n}\n\nexport default ViewData"]},"metadata":{},"sourceType":"module"}