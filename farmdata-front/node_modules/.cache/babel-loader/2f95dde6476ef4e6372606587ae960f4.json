{"ast":null,"code":"var _jsxFileName = \"/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/components/ViewData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DataTable from './DataTable';\nimport dataService from '../services/data';\nimport { Form, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewData = _ref => {\n  _s();\n\n  let {\n    farms\n  } = _ref;\n  const [farmFilter, setFarmFilter] = useState('');\n  const [monthFilter, setMonthFilter] = useState('');\n  const [typeFilter, setTypeFilter] = useState('');\n  const [data, setData] = useState([]);\n  const [max, setMax] = useState([]);\n  const [min, setMin] = useState([]);\n  const [average, setAverage] = useState([]);\n\n  const handleFarmFilter = event => {\n    setFarmFilter(event.target.value);\n  };\n\n  const handleTypeFilter = event => {\n    setTypeFilter(event.target.value);\n  };\n\n  const handleMonthFilter = event => {\n    setMonthFilter(event.target.value);\n  };\n\n  const filterAndShowData = async event => {\n    event.preventDefault();\n    const month = Number(monthFilter.substring(5, 7)) - 1;\n    console.log(month);\n    const year = monthFilter.substring(0, 4);\n    console.log(year);\n    const response = await dataService.getMonthlyFarmData(farmFilter, typeFilter, year, month);\n    const sortedData = await response.sort((a, b) => new Date(a.date) - new Date(b.date));\n    setData(sortedData);\n    const min = await dataService.getMonthlyFarmMin(farmFilter, typeFilter, year, month);\n    console.log(min);\n    setMin(min);\n    const max = await dataService.getMonthlyFarmMax(farmFilter, typeFilter, year, month);\n    console.log(max);\n    setMax(max);\n    const average = await dataService.getMonthlyFarmAverage(farmFilter, typeFilter, year, month);\n    console.log(average);\n    setAverage(average);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      id: \"filterDataForm\",\n      onSubmit: filterAndShowData,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Set Farm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          id: \"selectFarmToFilter\",\n          value: farmFilter,\n          onChange: handleFarmFilter,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), farms.map(farm => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: farm.id,\n            children: farm.name\n          }, farm.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Set type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          id: \"selectTypeToFilter\",\n          value: typeFilter,\n          onChange: handleTypeFilter,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pH\",\n            children: \"pH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rainFall\",\n            children: \"Rainfall\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"temperature\",\n            children: \"Temperature\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Set month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          id: \"selectMonthToFilter\",\n          value: monthFilter,\n          type: \"month\",\n          onChange: handleMonthFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"filter-button\",\n        type: \"submit\",\n        children: \"Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), \"min: \", min.length == 0 ? min : min.value, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), \"max: \", max.map(max => max.value), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), \"average: \", average, /*#__PURE__*/_jsxDEV(DataTable, {\n      id: \"table\",\n      filteredData: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewData, \"EyNBci95Lc/8qeGGz6mxS/7kgqw=\");\n\n_c = ViewData;\nexport default ViewData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewData\");","map":{"version":3,"sources":["/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/components/ViewData.js"],"names":["React","useState","DataTable","dataService","Form","Button","ViewData","farms","farmFilter","setFarmFilter","monthFilter","setMonthFilter","typeFilter","setTypeFilter","data","setData","max","setMax","min","setMin","average","setAverage","handleFarmFilter","event","target","value","handleTypeFilter","handleMonthFilter","filterAndShowData","preventDefault","month","Number","substring","console","log","year","response","getMonthlyFarmData","sortedData","sort","a","b","Date","date","getMonthlyFarmMin","getMonthlyFarmMax","getMonthlyFarmAverage","map","farm","id","name","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport DataTable from './DataTable'\n\nimport dataService from '../services/data'\n\nimport { Form, Button } from 'react-bootstrap'\n\nconst ViewData = ({ farms }) => {\n\n  const [ farmFilter, setFarmFilter ] = useState('')\n  const [ monthFilter, setMonthFilter ] = useState('')\n  const [ typeFilter, setTypeFilter ] = useState('')\n  const [ data, setData ] = useState([])\n  const [ max, setMax ] = useState([])\n  const [ min, setMin ] = useState([])\n  const [ average, setAverage ] = useState([])\n\n  const handleFarmFilter = (event) => {\n    setFarmFilter(event.target.value)\n  }\n\n  const handleTypeFilter = (event) => {\n    setTypeFilter(event.target.value)\n  }\n\n  const handleMonthFilter = (event) => {\n    setMonthFilter(event.target.value)\n  }\n\n  const filterAndShowData = async (event) => {\n    event.preventDefault()\n\n    const month = Number(monthFilter.substring(5,7))-1\n    console.log(month)\n    const year = monthFilter.substring(0,4)\n    console.log(year)\n\n    const response = await dataService.getMonthlyFarmData(farmFilter, typeFilter, year, month)\n    const sortedData = await response.sort((a, b) => new Date(a.date) - new Date(b.date))\n    setData(sortedData)\n\n    const min = await dataService.getMonthlyFarmMin(farmFilter, typeFilter, year, month)\n    console.log(min)\n    setMin(min)\n    const max = await dataService.getMonthlyFarmMax(farmFilter, typeFilter, year, month)\n    console.log(max)\n    setMax(max)\n    const average = await dataService.getMonthlyFarmAverage(farmFilter, typeFilter, year, month)\n    console.log(average)\n    setAverage(average)\n  }\n\n  return (\n    <div>\n      <br />\n      <Form id='filterDataForm' onSubmit={filterAndShowData}>\n\n        <Form.Group>\n          <Form.Label>Set Farm</Form.Label>\n          <Form.Select id='selectFarmToFilter' value={farmFilter} onChange={handleFarmFilter}>\n            <option disabled/>\n            {farms.map(farm =>\n              <option key={farm.name} value={farm.id}>{farm.name}</option>\n            )}\n          </Form.Select>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Set type</Form.Label>\n          <Form.Select id='selectTypeToFilter' value={typeFilter} onChange={handleTypeFilter}>\n            <option disabled/>\n            <option value=\"pH\">pH</option>\n            <option value=\"rainFall\">Rainfall</option>\n            <option value=\"temperature\">Temperature</option>\n          </Form.Select>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Set month</Form.Label>\n          <Form.Control id='selectMonthToFilter' value={monthFilter} type='month' onChange={handleMonthFilter}></Form.Control>\n        </Form.Group>\n\n        <br />\n        <Button id='filter-button' type='submit' >Filter</Button>\n\n      </Form>\n\n      <br />\n      min: {min.length == 0 ? min : min.value}\n      <br />\n      max: {max.map(max => max.value)}\n      <br />\n      average: {average}\n      <DataTable id='table' filteredData={data}/>\n    </div>\n  )\n\n}\n\nexport default ViewData"]},"metadata":{},"sourceType":"module"}