{"ast":null,"code":"var _jsxFileName = \"/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/components/ViewData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport FilterDataForm from './FilterDataForm';\nimport DataTable from './DataTable';\nimport DataChart from './DataChart';\nimport dataService from '../services/data';\nimport { Button } from 'react-bootstrap';\nimport dateFnsFormat from 'date-fns/format';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewData = _ref => {\n  _s();\n\n  let {\n    farms\n  } = _ref;\n  const [unit, setUnit] = useState('');\n  const [data, setData] = useState([]);\n  const [max, setMax] = useState([]);\n  const [min, setMin] = useState([]);\n  const [average, setAverage] = useState([]);\n  const [showTableNotChart, setShowTableNotChart] = useState(true);\n\n  const handleTableToChart = () => {\n    setShowTableNotChart(!showTableNotChart);\n  };\n\n  const filterAndShowData = async (farm, type, year, month) => {\n    const response = await dataService.getMonthlyFarmData(farm, type, year, month);\n    const sortedData = await response.sort((a, b) => new Date(a.date) - new Date(b.date));\n    setData(sortedData);\n    const min = await dataService.getMonthlyFarmMin(farm, type, year, month);\n    console.log(min);\n    setMin(min);\n    const max = await dataService.getMonthlyFarmMax(farm, type, year, month);\n    console.log(max);\n    setMax(max);\n    const average = await dataService.getMonthlyFarmAverage(farm, type, year, month);\n    console.log(average);\n    setAverage(average.toFixed(1));\n\n    if (type === 'pH') {\n      setUnit('pH');\n    } else if (type === 'rainFall') {\n      setUnit('mm');\n    } else if (type === 'temperature') {\n      setUnit('\\u00B0' + 'C');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterDataForm, {\n      farms: farms,\n      filterAndShowData: filterAndShowData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [data.length > 0 ? data[0].farm.name : '', \", \", data.length > 0 ? dateFnsFormat(new Date(data[0].date), 'MMMM yyyy') : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Minimum value: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), min.length > 0 ? min[0].value.toFixed(1) : '', \" \", unit, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Maximum value: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), max.length > 0 ? max[0].value.toFixed(1) : '', \" \", unit, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Average: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), average, \" \", unit, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      id: \"tableOrChart-button\",\n      variant: \"outline-primary\",\n      onClick: handleTableToChart,\n      children: showTableNotChart ? 'Show data in chart' : 'Show data in table'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), showTableNotChart ? /*#__PURE__*/_jsxDEV(DataTable, {\n      id: \"table\",\n      filteredData: data,\n      unit: unit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(DataChart, {\n      filteredData: data,\n      unit: unit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewData, \"QgYtqTbVw1DMPIMFP+PeTua5F7k=\");\n\n_c = ViewData;\nexport default ViewData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewData\");","map":{"version":3,"sources":["/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/components/ViewData.js"],"names":["React","useState","FilterDataForm","DataTable","DataChart","dataService","Button","dateFnsFormat","ViewData","farms","unit","setUnit","data","setData","max","setMax","min","setMin","average","setAverage","showTableNotChart","setShowTableNotChart","handleTableToChart","filterAndShowData","farm","type","year","month","response","getMonthlyFarmData","sortedData","sort","a","b","Date","date","getMonthlyFarmMin","console","log","getMonthlyFarmMax","getMonthlyFarmAverage","toFixed","length","name","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport FilterDataForm from './FilterDataForm'\nimport DataTable from './DataTable'\nimport DataChart from './DataChart'\nimport dataService from '../services/data'\n\nimport { Button } from 'react-bootstrap'\n\nimport dateFnsFormat from 'date-fns/format'\n\nconst ViewData = ({ farms }) => {\n\n  const [ unit, setUnit ] = useState('')\n  const [ data, setData ] = useState([])\n  const [ max, setMax ] = useState([])\n  const [ min, setMin ] = useState([])\n  const [ average, setAverage ] = useState([])\n  const [ showTableNotChart, setShowTableNotChart ] = useState(true)\n\n  const handleTableToChart = () => {\n    setShowTableNotChart(!showTableNotChart)\n  }\n\n  const filterAndShowData = async (farm, type, year, month) => {\n\n    const response = await dataService.getMonthlyFarmData(farm, type, year, month)\n    const sortedData = await response.sort((a, b) => new Date(a.date) - new Date(b.date))\n    setData(sortedData)\n\n    const min = await dataService.getMonthlyFarmMin(farm, type, year, month)\n    console.log(min)\n    setMin(min)\n    const max = await dataService.getMonthlyFarmMax(farm, type, year, month)\n    console.log(max)\n    setMax(max)\n    const average = await dataService.getMonthlyFarmAverage(farm, type, year, month)\n    console.log(average)\n    setAverage(average.toFixed(1))\n\n    if (type === 'pH') {\n      setUnit('pH')\n    } else if (type === 'rainFall') {\n      setUnit('mm')\n    } else if (type === 'temperature') {\n      setUnit('\\u00B0'+'C')\n    }\n  }\n\n  return (\n    <div>\n      <br />\n      <FilterDataForm farms={farms} filterAndShowData={filterAndShowData} />\n      <br />\n      <h4>{data.length > 0 ? data[0].farm.name : ''}, {data.length > 0 ? dateFnsFormat(new Date(data[0].date), 'MMMM yyyy') : ''}</h4>\n      <b>Minimum value: </b>{min.length > 0 ? min[0].value.toFixed(1) : ''} {unit}\n      <br />\n      <b>Maximum value: </b>{max.length > 0 ? max[0].value.toFixed(1) : ''} {unit}\n      <br />\n      <b>Average: </b>{average} {unit}\n      <br />\n      <Button\n        id='tableOrChart-button'\n        variant='outline-primary'\n        onClick={handleTableToChart}\n      >\n        {showTableNotChart ? 'Show data in chart' : 'Show data in table'}\n      </Button>\n      {showTableNotChart\n        ? <DataTable id='table' filteredData={data} unit={unit}/>\n        : <DataChart filteredData={data} unit={unit}/>\n      }\n    </div>\n  )\n\n}\n\nexport default ViewData"]},"metadata":{},"sourceType":"module"}