{"ast":null,"code":"var _jsxFileName = \"/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Notification from './components/Notification';\nimport Togglable from './components/Togglable';\nimport AddData from './components/AddData';\nimport ViewData from './components/ViewData';\nimport dataService from './services/data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [farms, setFarms] = useState([]);\n  const [message, setMessage] = useState('');\n  const [messageColor, setMessageColor] = useState('');\n  useEffect(() => {\n    dataService.getAll().then(measurements => {\n      const sortedData = measurements.sort((a, b) => new Date(a.date) - new Date(b.date));\n      setData(sortedData);\n    });\n  }, []);\n  useEffect(() => {\n    dataService.getFarms().then(farms => {\n      setFarms(farms);\n    });\n  }, []);\n\n  const fetchData = () => {\n    console.log('fetching data...');\n\n    try {\n      console.log('fetch data');\n    } catch (exception) {\n      console.log('failed fetching data');\n      setMessage(`Fetching data failed ${exception}`);\n      setMessageColor('red');\n      setTimeout(() => {\n        setMessage('');\n      }, 4000);\n    }\n  };\n\n  const resetDatabase = () => {\n    if (window.confirm('Are you sure you want to reset the database? The database will be emptied.')) {\n      console.log('resetting database...');\n      dataService.resetMeasurements().then(response => {\n        console.log(response);\n      });\n      setData([]);\n    }\n  };\n\n  const createMeasurement = async measurement => {\n    console.log(measurement);\n\n    try {\n      const response = await dataService.postMeasurement(measurement);\n      console.log(response.data);\n      const newData = { ...response.data,\n        farm: {\n          id: response.data.farm,\n          name: measurement.farm\n        }\n      };\n      console.log(newData);\n      const allData = data.concat(newData);\n      const sortedData = allData.sort((a, b) => new Date(a.date) - new Date(b.date));\n      setData(sortedData);\n      setMessage('New data added');\n      setMessageColor('green');\n      setTimeout(() => {\n        setMessage('');\n      }, 4000);\n    } catch (exception) {\n      console.log('failed adding measurement');\n      setMessage(`Adding data failed ${exception}`);\n      setMessageColor('red');\n      setTimeout(() => {\n        setMessage('');\n      }, 4000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      fetchData: fetchData,\n      resetDatabase: resetDatabase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: message,\n      messageColor: messageColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Togglable, {\n      openButtonLabel: \"Add data\",\n      openButtonId: \"addData-button\",\n      closeButtonLabel: \"Hide form\",\n      closeButtonId: \"hideForm-button\",\n      children: /*#__PURE__*/_jsxDEV(AddData, {\n        farms: farms,\n        createMeasurement: createMeasurement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Togglable, {\n      openButtonLabel: \"View data\",\n      openButtonId: \"viewData-button\",\n      closeButtonLabel: \"Hide data\",\n      closeButtonId: \"hideData-button\",\n      children: /*#__PURE__*/_jsxDEV(ViewData, {\n        farms: farms,\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"HPlq+6B9xfOdlca5QrycdsJ7X2w=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/App.js"],"names":["React","useState","useEffect","Header","Notification","Togglable","AddData","ViewData","dataService","App","data","setData","farms","setFarms","message","setMessage","messageColor","setMessageColor","getAll","then","measurements","sortedData","sort","a","b","Date","date","getFarms","fetchData","console","log","exception","setTimeout","resetDatabase","window","confirm","resetMeasurements","response","createMeasurement","measurement","postMeasurement","newData","farm","id","name","allData","concat"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport Header from './components/Header'\nimport Notification from './components/Notification'\nimport Togglable from './components/Togglable'\nimport AddData from './components/AddData'\nimport ViewData from './components/ViewData'\n\nimport dataService from './services/data'\n\nconst App = () => {\n\n  const [ data, setData ] = useState([])\n  const [ farms, setFarms ] = useState([])\n  const [ message, setMessage ] = useState('')\n  const [ messageColor, setMessageColor ] = useState('')\n\n  useEffect(() => {\n    dataService.getAll().then(measurements => {\n      const sortedData = measurements.sort((a, b) => new Date(a.date) - new Date(b.date))\n      setData(sortedData)\n    })\n  }, [])\n\n  useEffect(() => {\n    dataService.getFarms().then(farms => {\n      setFarms(farms)\n    })\n  }, [])\n\n  const fetchData = () => {\n    console.log('fetching data...')\n    try {\n      console.log('fetch data')\n    } catch (exception) {\n      console.log('failed fetching data')\n      setMessage(`Fetching data failed ${exception}`)\n      setMessageColor('red')\n      setTimeout(() => {\n        setMessage('')\n      }, 4000)\n    }\n  }\n\n  const resetDatabase = () => {\n    if (window.confirm('Are you sure you want to reset the database? The database will be emptied.')) {\n      console.log('resetting database...')\n      dataService.resetMeasurements().then(response => {\n        console.log(response)\n      })\n      setData([])\n    }\n  }\n\n  const createMeasurement = async (measurement) => {\n    console.log(measurement)\n    try {\n      const response = await dataService.postMeasurement(measurement)\n      console.log(response.data)\n      const newData = {\n        ...response.data,\n        farm: { id: response.data.farm, name: measurement.farm }\n      }\n      console.log(newData)\n      const allData = data.concat(newData)\n      const sortedData = allData.sort((a, b) => new Date(a.date) - new Date(b.date))\n      setData(sortedData)\n      setMessage('New data added')\n      setMessageColor('green')\n      setTimeout(() => {\n        setMessage('')\n      }, 4000)\n    } catch (exception) {\n      console.log('failed adding measurement')\n      setMessage(`Adding data failed ${exception}`)\n      setMessageColor('red')\n      setTimeout(() => {\n        setMessage('')\n      }, 4000)\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <Header fetchData={fetchData} resetDatabase={resetDatabase}/>\n      <Notification message={message} messageColor={messageColor}/>\n      <Togglable\n        openButtonLabel='Add data'\n        openButtonId='addData-button'\n        closeButtonLabel='Hide form'\n        closeButtonId='hideForm-button'>\n        <AddData farms={farms} createMeasurement={createMeasurement}/>\n      </Togglable>\n      <br />\n      <Togglable\n        openButtonLabel='View data'\n        openButtonId='viewData-button'\n        closeButtonLabel='Hide data'\n        closeButtonId='hideData-button'>\n        <ViewData farms={farms} data={data}/>\n      </Togglable>\n      <br />\n    </div>\n\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}