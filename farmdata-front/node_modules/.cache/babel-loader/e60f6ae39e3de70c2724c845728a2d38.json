{"ast":null,"code":"import axios from 'axios';\nconst baseUrlM = '/api/measurements';\nconst baseUrlF = '/api/farms'; //const getAll = () => {\n//  const request = axios.get(baseUrlM)\n//  return request.then(response => response.data)\n//}\n\nconst getMonthlyFarmData = (farmId, type, year, month) => {\n  const url = baseUrlM + '/' + farmId + '/' + type + '/' + year + '/' + month;\n  const request = axios.get(url);\n  return request.then(response => response.data);\n};\n\nconst getMonthlyFarmMin = (farmId, type, year, month) => {\n  const url = baseUrlM + '/min/' + farmId + '/' + type + '/' + year + '/' + month;\n  const request = axios.get(url);\n  return request.then(response => response.data);\n};\n\nconst getMonthlyFarmMax = (farmId, type, year, month) => {\n  const url = baseUrlM + '/max/' + farmId + '/' + type + '/' + year + '/' + month;\n  const request = axios.get(url);\n  return request.then(response => response.data);\n};\n\nconst postMeasurement = newMeasurement => {\n  console.log('post called');\n  return axios.post(baseUrlM, newMeasurement);\n};\n\nconst getFarms = () => {\n  const request = axios.get(baseUrlF);\n  return request.then(response => response.data);\n};\n\nconst resetMeasurements = () => {\n  const request = axios.post(baseUrlM + '/reset');\n  return request.then(response => response.data);\n};\n\nconst fetchData = () => {\n  const request = axios.post(baseUrlM + '/fetch');\n  return request.then(response => response.data);\n};\n\nexport default {\n  getMonthlyFarmData,\n  getMonthlyFarmMin,\n  getMonthlyFarmMax,\n  getFarms,\n  postMeasurement,\n  resetMeasurements,\n  fetchData\n};","map":{"version":3,"sources":["/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/services/data.js"],"names":["axios","baseUrlM","baseUrlF","getMonthlyFarmData","farmId","type","year","month","url","request","get","then","response","data","getMonthlyFarmMin","getMonthlyFarmMax","postMeasurement","newMeasurement","console","log","post","getFarms","resetMeasurements","fetchData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,QAAQ,GAAG,mBAAjB;AACA,MAAMC,QAAQ,GAAG,YAAjB,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAG,CAACC,MAAD,EAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,KAA+B;AACxD,QAAMC,GAAG,GAAGP,QAAQ,GAAC,GAAT,GAAaG,MAAb,GAAoB,GAApB,GAAwBC,IAAxB,GAA6B,GAA7B,GAAiCC,IAAjC,GAAsC,GAAtC,GAA0CC,KAAtD;AACA,QAAME,OAAO,GAAGT,KAAK,CAACU,GAAN,CAAUF,GAAV,CAAhB;AACA,SAAOC,OAAO,CAACE,IAAR,CAAaC,QAAQ,IAAIA,QAAQ,CAACC,IAAlC,CAAP;AACD,CAJD;;AAMA,MAAMC,iBAAiB,GAAG,CAACV,MAAD,EAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,KAA+B;AACvD,QAAMC,GAAG,GAAGP,QAAQ,GAAC,OAAT,GAAiBG,MAAjB,GAAwB,GAAxB,GAA4BC,IAA5B,GAAiC,GAAjC,GAAqCC,IAArC,GAA0C,GAA1C,GAA8CC,KAA1D;AACA,QAAME,OAAO,GAAGT,KAAK,CAACU,GAAN,CAAUF,GAAV,CAAhB;AACA,SAAOC,OAAO,CAACE,IAAR,CAAaC,QAAQ,IAAIA,QAAQ,CAACC,IAAlC,CAAP;AACD,CAJD;;AAMA,MAAME,iBAAiB,GAAG,CAACX,MAAD,EAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,KAA+B;AACvD,QAAMC,GAAG,GAAGP,QAAQ,GAAC,OAAT,GAAiBG,MAAjB,GAAwB,GAAxB,GAA4BC,IAA5B,GAAiC,GAAjC,GAAqCC,IAArC,GAA0C,GAA1C,GAA8CC,KAA1D;AACA,QAAME,OAAO,GAAGT,KAAK,CAACU,GAAN,CAAUF,GAAV,CAAhB;AACA,SAAOC,OAAO,CAACE,IAAR,CAAaC,QAAQ,IAAIA,QAAQ,CAACC,IAAlC,CAAP;AACD,CAJD;;AAMA,MAAMG,eAAe,GAAGC,cAAc,IAAI;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,SAAOnB,KAAK,CAACoB,IAAN,CAAWnB,QAAX,EAAqBgB,cAArB,CAAP;AACD,CAHD;;AAKA,MAAMI,QAAQ,GAAG,MAAM;AACrB,QAAMZ,OAAO,GAAGT,KAAK,CAACU,GAAN,CAAUR,QAAV,CAAhB;AACA,SAAOO,OAAO,CAACE,IAAR,CAAaC,QAAQ,IAAIA,QAAQ,CAACC,IAAlC,CAAP;AACD,CAHD;;AAKA,MAAMS,iBAAiB,GAAG,MAAM;AAC9B,QAAMb,OAAO,GAAGT,KAAK,CAACoB,IAAN,CAAWnB,QAAQ,GAAG,QAAtB,CAAhB;AACA,SAAOQ,OAAO,CAACE,IAAR,CAAaC,QAAQ,IAAIA,QAAQ,CAACC,IAAlC,CAAP;AACD,CAHD;;AAKA,MAAMU,SAAS,GAAG,MAAM;AACtB,QAAMd,OAAO,GAAGT,KAAK,CAACoB,IAAN,CAAWnB,QAAQ,GAAG,QAAtB,CAAhB;AACA,SAAOQ,OAAO,CAACE,IAAR,CAAaC,QAAQ,IAAIA,QAAQ,CAACC,IAAlC,CAAP;AACD,CAHD;;AAKA,eAAe;AACbV,EAAAA,kBADa;AAEbW,EAAAA,iBAFa;AAGbC,EAAAA,iBAHa;AAIbM,EAAAA,QAJa;AAKbL,EAAAA,eALa;AAMbM,EAAAA,iBANa;AAObC,EAAAA;AAPa,CAAf","sourcesContent":["import axios from 'axios'\nconst baseUrlM = '/api/measurements'\nconst baseUrlF = '/api/farms'\n\n//const getAll = () => {\n//  const request = axios.get(baseUrlM)\n//  return request.then(response => response.data)\n//}\n\nconst getMonthlyFarmData = (farmId, type, year, month) => {\n  const url = baseUrlM+'/'+farmId+'/'+type+'/'+year+'/'+month\n  const request = axios.get(url)\n  return request.then(response => response.data)\n}\n\nconst getMonthlyFarmMin = (farmId, type, year, month) => {\n  const url = baseUrlM+'/min/'+farmId+'/'+type+'/'+year+'/'+month\n  const request = axios.get(url)\n  return request.then(response => response.data)\n}\n\nconst getMonthlyFarmMax = (farmId, type, year, month) => {\n  const url = baseUrlM+'/max/'+farmId+'/'+type+'/'+year+'/'+month\n  const request = axios.get(url)\n  return request.then(response => response.data)\n}\n\nconst postMeasurement = newMeasurement => {\n  console.log('post called')\n  return axios.post(baseUrlM, newMeasurement)\n}\n\nconst getFarms = () => {\n  const request = axios.get(baseUrlF)\n  return request.then(response => response.data)\n}\n\nconst resetMeasurements = () => {\n  const request = axios.post(baseUrlM + '/reset')\n  return request.then(response => response.data)\n}\n\nconst fetchData = () => {\n  const request = axios.post(baseUrlM + '/fetch')\n  return request.then(response => response.data)\n}\n\nexport default {\n  getMonthlyFarmData,\n  getMonthlyFarmMin,\n  getMonthlyFarmMax,\n  getFarms,\n  postMeasurement,\n  resetMeasurements,\n  fetchData\n}"]},"metadata":{},"sourceType":"module"}