{"ast":null,"code":"var _jsxFileName = \"/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/components/ViewData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport FilterDataForm from './FilterDataForm';\nimport DataTable from './DataTable';\nimport DataChart from './DataChart';\nimport Notification from './Notification';\nimport dataService from '../services/data';\nimport { Button } from 'react-bootstrap';\nimport dateFnsFormat from 'date-fns/format';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewData = _ref => {\n  _s();\n\n  let {\n    farms\n  } = _ref;\n  const [unit, setUnit] = useState('');\n  const [data, setData] = useState([]);\n  const [max, setMax] = useState([]);\n  const [min, setMin] = useState([]);\n  const [average, setAverage] = useState([]);\n  const [showTableNotChart, setShowTableNotChart] = useState(true);\n  const [message, setMessage] = useState(true);\n  const [messageColor, setMessageColor] = useState('');\n\n  const handleTableToChart = () => {\n    setShowTableNotChart(!showTableNotChart);\n  };\n\n  const filterAndShowData = async (farm, type, year, month) => {\n    try {\n      const response = await dataService.getMonthlyFarmData(farm, type, year, month);\n      const sortedData = await response.sort((a, b) => new Date(a.date) - new Date(b.date));\n      setData(sortedData);\n      const min = await dataService.getMonthlyFarmMin(farm, type, year, month);\n      console.log(min);\n      setMin(min);\n      const max = await dataService.getMonthlyFarmMax(farm, type, year, month);\n      console.log(max);\n      setMax(max);\n      const average = await dataService.getMonthlyFarmAverage(farm, type, year, month);\n      console.log(average);\n      setAverage(average.toFixed(1));\n\n      if (type === 'pH') {\n        setUnit('pH');\n      } else if (type === 'rainFall') {\n        setUnit('mm');\n      } else if (type === 'temperature') {\n        setUnit('\\u00B0' + 'C');\n      }\n    } catch (exception) {\n      console.log(exception);\n      setMessageColor('red');\n      setMessage(`Unable to get data: ${exception}`);\n      setTimeout(() => {\n        setMessage('');\n      }, 4000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: message,\n      messageColor: messageColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterDataForm, {\n      farms: farms,\n      filterAndShowData: filterAndShowData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [data.length > 0 ? data[0].farm.name : '', \", \", data.length > 0 ? dateFnsFormat(new Date(data[0].date), 'MMMM yyyy') : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Minimum value: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), min.length > 0 ? min[0].value.toFixed(1) : '', \" \", unit, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Maximum value: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), max.length > 0 ? max[0].value.toFixed(1) : '', \" \", unit, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Average: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), average, \" \", unit, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      id: \"tableOrChart-button\",\n      variant: \"outline-primary\",\n      onClick: handleTableToChart,\n      children: showTableNotChart ? 'Show data in chart' : 'Show data in table'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), showTableNotChart ? /*#__PURE__*/_jsxDEV(DataTable, {\n      id: \"table\",\n      filteredData: data,\n      unit: unit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(DataChart, {\n      filteredData: data,\n      unit: unit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewData, \"2tvUmwNVjYOY0crO3Qai8zZ68Qs=\");\n\n_c = ViewData;\nexport default ViewData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewData\");","map":{"version":3,"sources":["/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/components/ViewData.js"],"names":["React","useState","FilterDataForm","DataTable","DataChart","Notification","dataService","Button","dateFnsFormat","ViewData","farms","unit","setUnit","data","setData","max","setMax","min","setMin","average","setAverage","showTableNotChart","setShowTableNotChart","message","setMessage","messageColor","setMessageColor","handleTableToChart","filterAndShowData","farm","type","year","month","response","getMonthlyFarmData","sortedData","sort","a","b","Date","date","getMonthlyFarmMin","console","log","getMonthlyFarmMax","getMonthlyFarmAverage","toFixed","exception","setTimeout","length","name","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport FilterDataForm from './FilterDataForm'\nimport DataTable from './DataTable'\nimport DataChart from './DataChart'\nimport Notification from './Notification'\nimport dataService from '../services/data'\n\nimport { Button } from 'react-bootstrap'\n\nimport dateFnsFormat from 'date-fns/format'\n\nconst ViewData = ({ farms }) => {\n\n  const [ unit, setUnit ] = useState('')\n  const [ data, setData ] = useState([])\n  const [ max, setMax ] = useState([])\n  const [ min, setMin ] = useState([])\n  const [ average, setAverage ] = useState([])\n  const [ showTableNotChart, setShowTableNotChart ] = useState(true)\n  const [ message, setMessage ] = useState(true)\n  const [ messageColor, setMessageColor ] = useState('')\n\n  const handleTableToChart = () => {\n    setShowTableNotChart(!showTableNotChart)\n  }\n\n  const filterAndShowData = async (farm, type, year, month) => {\n\n    try {\n      const response = await dataService.getMonthlyFarmData(farm, type, year, month)\n      const sortedData = await response.sort((a, b) => new Date(a.date) - new Date(b.date))\n      setData(sortedData)\n\n      const min = await dataService.getMonthlyFarmMin(farm, type, year, month)\n      console.log(min)\n      setMin(min)\n      const max = await dataService.getMonthlyFarmMax(farm, type, year, month)\n      console.log(max)\n      setMax(max)\n      const average = await dataService.getMonthlyFarmAverage(farm, type, year, month)\n      console.log(average)\n      setAverage(average.toFixed(1))\n\n      if (type === 'pH') {\n        setUnit('pH')\n      } else if (type === 'rainFall') {\n        setUnit('mm')\n      } else if (type === 'temperature') {\n        setUnit('\\u00B0'+'C')\n      }\n    } catch (exception) {\n      console.log(exception)\n      setMessageColor('red')\n      setMessage(`Unable to get data: ${exception}`)\n      setTimeout(() => {\n        setMessage('')\n      }, 4000)\n    }\n  }\n\n  return (\n    <div>\n      <br />\n      <Notification message={message} messageColor={messageColor} />\n      <FilterDataForm farms={farms} filterAndShowData={filterAndShowData} />\n      <br />\n      <h4>{data.length > 0 ? data[0].farm.name : ''}, {data.length > 0 ? dateFnsFormat(new Date(data[0].date), 'MMMM yyyy') : ''}</h4>\n      <b>Minimum value: </b>{min.length > 0 ? min[0].value.toFixed(1) : ''} {unit}\n      <br />\n      <b>Maximum value: </b>{max.length > 0 ? max[0].value.toFixed(1) : ''} {unit}\n      <br />\n      <b>Average: </b>{average} {unit}\n      <br />\n      <Button\n        id='tableOrChart-button'\n        variant='outline-primary'\n        onClick={handleTableToChart}\n      >\n        {showTableNotChart ? 'Show data in chart' : 'Show data in table'}\n      </Button>\n      {showTableNotChart\n        ? <DataTable id='table' filteredData={data} unit={unit}/>\n        : <DataChart filteredData={data} unit={unit}/>\n      }\n    </div>\n  )\n\n}\n\nexport default ViewData"]},"metadata":{},"sourceType":"module"}