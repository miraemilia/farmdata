{"ast":null,"code":"var _jsxFileName = \"/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/components/ViewData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DataTable from './DataTable';\nimport dataService from '../services/data';\nimport { Form, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewData = _ref => {\n  _s();\n\n  let {\n    farms\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [farmFilter, setFarmFilter] = useState('');\n  const [monthFilter, setMonthFilter] = useState('');\n  const [pHData, setPHData] = useState([]);\n  const [rainFallData, setRainFallData] = useState([]);\n  const [temperatureData, setTemperatureData] = useState([]); //const [ showPH, setShowPH ] = useState(true)\n  //const [ showRainFall, setShowRainFall ] = useState(true)\n  //const [ showTemperature, setShowTemperature ] = useState(true)\n\n  const handleFarmFilter = event => {\n    setFarmFilter(event.target.value);\n  };\n\n  const handleMonthFilter = event => {\n    setMonthFilter(event.target.value);\n  };\n\n  const filterAndShowData = async event => {\n    event.preventDefault();\n    const response = await dataService.getMonthlyFarmData(farmFilter.id, monthFilter);\n    const sortedData = response.sort((a, b) => new Date(a.date) - new Date(b.date));\n    setData(sortedData);\n    console.log(data);\n    setPHData(data.filter(d => d.type === 'pH'));\n    setRainFallData(data.filter(d => d.type === 'rainFall'));\n    setTemperatureData(data.filter(d => d.type === 'temperature'));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      id: \"filterDataForm\",\n      onSubmit: filterAndShowData,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Set Farm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          id: \"selectFarmToFilter\",\n          value: farmFilter,\n          onChange: handleFarmFilter,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), farms.map(farm => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: {\n              id: farm.id,\n              name: farm.name\n            },\n            children: farm.name\n          }, farm.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Set month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          id: \"selectMonthToFilter\",\n          value: monthFilter,\n          type: \"month\",\n          onChange: handleMonthFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"filter-button\",\n        type: \"submit\",\n        children: \"Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: farmFilter.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"pH\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      id: \"pHTable\",\n      filteredData: pHData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Rainfall\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      id: \"rainFallTable\",\n      filteredData: rainFallData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Temperature\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      id: \"temperatureTable\",\n      filteredData: temperatureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewData, \"Euq1ngtxKITZPIlMRavie2VD1uE=\");\n\n_c = ViewData;\nexport default ViewData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewData\");","map":{"version":3,"sources":["/Users/Juhani/Documents/Mira/Solita/farmdata/farmdata-front/src/components/ViewData.js"],"names":["React","useState","DataTable","dataService","Form","Button","ViewData","farms","data","setData","farmFilter","setFarmFilter","monthFilter","setMonthFilter","pHData","setPHData","rainFallData","setRainFallData","temperatureData","setTemperatureData","handleFarmFilter","event","target","value","handleMonthFilter","filterAndShowData","preventDefault","response","getMonthlyFarmData","id","sortedData","sort","a","b","Date","date","console","log","filter","d","type","map","farm","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport DataTable from './DataTable'\n\nimport dataService from '../services/data'\n\nimport { Form, Button } from 'react-bootstrap'\n\nconst ViewData = ({ farms }) => {\n\n  const [ data, setData ] = useState([])\n  const [ farmFilter, setFarmFilter ] = useState('')\n  const [ monthFilter, setMonthFilter ] = useState('')\n  const [ pHData, setPHData ] = useState([])\n  const [ rainFallData, setRainFallData ] = useState([])\n  const [ temperatureData, setTemperatureData ] = useState([])\n  //const [ showPH, setShowPH ] = useState(true)\n  //const [ showRainFall, setShowRainFall ] = useState(true)\n  //const [ showTemperature, setShowTemperature ] = useState(true)\n\n  const handleFarmFilter = (event) => {\n    setFarmFilter(event.target.value)\n  }\n\n  const handleMonthFilter = (event) => {\n    setMonthFilter(event.target.value)\n  }\n\n  const filterAndShowData = async (event) => {\n    event.preventDefault()\n    const response = await dataService.getMonthlyFarmData(farmFilter.id, monthFilter)\n    const sortedData = response.sort((a, b) => new Date(a.date) - new Date(b.date))\n    setData(sortedData)\n    console.log(data)\n    setPHData(data.filter(d => d.type === 'pH'))\n    setRainFallData(data.filter(d => d.type === 'rainFall'))\n    setTemperatureData(data.filter(d => d.type === 'temperature'))\n  }\n\n  return (\n    <div>\n      <br />\n      <Form id='filterDataForm' onSubmit={filterAndShowData}>\n\n        <Form.Group>\n          <Form.Label>Set Farm</Form.Label>\n          <Form.Select id='selectFarmToFilter' value={farmFilter} onChange={handleFarmFilter}>\n            <option disabled/>\n            {farms.map(farm =>\n              <option key={farm.name} value={{ id: farm.id, name: farm.name }}>{farm.name}</option>\n            )}\n          </Form.Select>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Set month</Form.Label>\n          <Form.Control id='selectMonthToFilter' value={monthFilter} type='month' onChange={handleMonthFilter}></Form.Control>\n        </Form.Group>\n\n        <Button id='filter-button' type='submit' >Filter</Button>\n      </Form>\n\n      <h3>{farmFilter.name}</h3>\n      <h4>pH</h4>\n      <DataTable id='pHTable' filteredData={pHData}/>\n      <h4>Rainfall</h4>\n      <DataTable id='rainFallTable' filteredData={rainFallData}/>\n      <h4>Temperature</h4>\n      <DataTable id='temperatureTable' filteredData={temperatureData}/>\n    </div>\n  )\n\n}\n\nexport default ViewData"]},"metadata":{},"sourceType":"module"}